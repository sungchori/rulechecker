

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;

class Login {
	
	public final Connection getConnection() throws SQLException {
		String username="sungchul";
		String password="yoon";
		//VARIABLE Hardcode Prevention Err
		return DriverManager.getConnection("jdbc:mysql://localhost/dbName", username, password);
		
		//STRING_LITERAL Hardcode Prevention Err
		//return DriverManager.getConnection("jdbc:mysql://localhost/dbName", "username", "password");
		}
	String hashPassword(char[] password) {
		String a = "1234";
		return a;
		}
	public void doPrivilegedAction(String username, char[] password) throws SQLException {
		Connection connection = getConnection();
		if (connection == null) {
			}
		try {
			String pwd = hashPassword(password);
			//SQL Prevention Err
			String sqlString = "SELECT * FROM db_user WHERE username = '" + username + "' AND password = '" + pwd + "'";
			Statement stmt = connection.createStatement();
			ResultSet rs = stmt.executeQuery(sqlString);
			
			
			if (!rs.next()) {
				throw new SecurityException(
						"User name or password incorrect"
						);
				}
			//NullPointerEx Prevention Err
			}catch(NullPointerException ex){
			
			}
				finally {
			}
				try {
					connection.close();
					} catch (SQLException x) {
						// Forward to handler
						}
				}
		}
public class nullhard {
	//Field Prevention Err
	public static int total; 
	public static final int total2=10;
	public static void main(String args[]) {
		System.out.println("Start main");
		//Random Prevention Err
		Random number = new Random(123L);
		for (int i = 0; i < 20; i++) {
			int n = number.nextInt(21);
			System.out.println(n);
		}
		System.out.println("----------------------------------------");
		for(int i = 0; i < 20; i++) {
			add();
			add();
			remove();
			System.out.println(total);
		}
	}
	public static void add() {
		if (total < Integer.MAX_VALUE) {      
			total++;
			} else {
				throw new ArithmeticException("Overflow");
				}
		}
	public static void remove() {
		if (total > 0) {      
			total--;
			} else {
				throw new ArithmeticException("Overflow");
				}
		}
		
	
}

